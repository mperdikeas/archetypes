<project name="foo" basedir="." default="run">
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${basedir}/tools/ant-contrib-1.0b3.jar" />

    <property name="project.MainClass.name" value="Client"/>
    <property name="project.distname"       value="${ant.project.name}"/>
    <property name="jar-artefact.name"      value="${ant.project.name}.jar"/>
    <property name="build.dir"              value="${basedir}/build"/>
    <property name="dist.dir"               value="${basedir}/dist"/>
    <property name="dist-runnable.dir"      value="${basedir}/dist-runnable"/>
    <property name="jar-artefact"           value="${dist.dir}/${jar-artefact.name}"/>
    <property name="src.dir"                value="${basedir}/src"/>
    <property name="javasource.dir"         value="${src.dir}"/>
    <property name="wsdl-source.dir"        value="${basedir}/src-wsdl-auto"/>
    <property name="compilelibs.dir"        value="${basedir}/lib-compile"/>
    <property name="runtimelibs.dir"        value="${basedir}/lib-runtime"/>
    <property name="run-app.script.name"    value="run-app"/>

    <path id = "compile.classpath">
      <fileset dir="${compilelibs.dir}">
        <include name ="*.jar"/>
      </fileset>
    </path>

<!-- Next, my package task uses that classpath -->
<target name="package" depends="compile" description="package the project in a runnable Jar together with the dependencies">
  <echo>=== PACKAGE ===</echo>
  
    <!-- convert compile.classpath to mf.classpath (the string needed for the manifest task) -->
    <pathconvert property="mf.classpath" pathsep=" ">
        <path refid="compile.classpath"/>
        <flattenmapper/>
    </pathconvert>


  <!-- now build the manifest file, using mf.classpath -->
  <tstamp/><!-- needed for TODAY -->
  <manifest file="MANIFEST.MF">
    <attribute name="Built-By" value="${manifest.built.by}"/>
    <attribute name="Created-By" value="${manifest.created.by}"/>
    <attribute name="Main-Class" value="${project.MainClass.name}"/>
    <attribute name="Implementation-Version" value="${version.number}-b${build.number}"/>   
    <attribute name="Built-Date" value="${TODAY}"/>
    <attribute name="Class-Path" value="${mf.classpath}" />
  </manifest>
  
  <!-- create the jar file, including the manifest file we just created -->
  <jar basedir="${build.dir}"
       destfile="${dist-runnable.dir}/${project.distname}.jar"
       includes="**/*.*"
       excludes="**/*Test*"
       manifest="MANIFEST.MF" />

  <!-- copy all the jar files out to the destination directory (dist.dir) -->
  <copy todir="${dist-runnable.dir}">
    <fileset dir="${compilelibs.dir}">
      <exclude name="junit*" />
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
  </copy>
  <!-- move this file before the 'jar' task (and put it in the 'classes' dir) if you'd rather 
       include it in the jar -->
  <!--copy file="${resources.dir}/log4j.properties" tofile="${dest.dir}/log4j.properties" overwrite="true" />
  <copy file="${resources.dir}/${properties.file}" tofile="${dest.dir}/${properties.file}" overwrite="true" />
  <delete dir="${dest.dir.classes}" /-->

    <echo file="${run-app.script.name}" append="false">java -jar ${dist-runnable.dir}/${project.distname}.jar ${project.MainClass.name}</echo>
    <chmod file="${run-app.script.name}" perm="ugo+rx"/>
    <delete file= "MANIFEST.MF"/>
</target>


    <!-- Check timestamp on files -->
    <target name="prepare">
        <tstamp/>
    </target>

    <target name="create-wsdl-files">
        <mkdir dir="${wsdl-source.dir}"/>
        <exec executable="./create-stubs">
        </exec>
    </target>

    <target name="compile" depends="prepare, create-wsdl-files"
            description="Compile java sources">
        <mkdir  dir="${build.dir}"/>
        <property name="classpath-comp.msg" refid="compile.classpath"/>
        <echo message="compiling with classpath = ${classpath-comp.msg}"/>
        <javac destdir="${build.dir}"
               source="1.7"
               target="1.7"
               debug="true"
               >
            <include name="**/*.java"/>
            <classpath refid="compile.classpath"/>
            <compilerarg line="-encoding utf-8"/> <!-- added that on 2012-XI-13 althought not fully convinced" -->
            <src path="${javasource.dir}"/>
            <src path="${wsdl-source.dir}"/>
        </javac>
	<copy todir="${build.dir}">
            <fileset dir="${javasource.dir}">
	        <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>


    <target name="jar" depends="compile"
            description="jar class files">
      <mkdir  dir="${dist.dir}"/>
      <jar destfile="${dist.dir}/${project.distname}.jar"
           basedir="${build.dir}"
      />
    </target>

    <target name="clean"
            description="Prepare for clean build">
      <delete dir="${build.dir}"/>
      <delete dir="${dist.dir}"/>
      <delete dir="${dist-runnable.dir}"/>
      <delete file="${run-app.script.name}"/>
      <delete dir="${wsdl-source.dir}"/>
    </target>

    <path id = "run.classpath">
        <pathelement path = "${jar-artefact}"/>
        <fileset dir="${runtimelibs.dir}">
          <include name ="*.jar"/>
        </fileset>
    </path>

    <macrodef name="run-generic">
        <attribute name="paranoid" />
        <sequential>
            <if>
                <equals arg1="@{paranoid}" arg2="true" />
                <then>
                    <echo message="removing ${build.dir} folder to be sure we run from the jar"/>
                    <delete dir="${build.dir}"/>
                </then> 
            </if>
        <property name="classpath-run.msg" refid="run.classpath"/>
        <echo message="running the app with classpath = ${classpath-run.msg}"/>
        <echo message="ant.java.version=${ant.java.version}" />
        <java classname ="${project.MainClass.name}" fork="true"> <!-- set it to "false" and watch it fail unless rt.jar is explicitly added in the runtime classspaht -->
             <classpath refid="run.classpath"/>
        </java>
        </sequential>
    </macrodef>

    <target name="run" depends="jar" description="run the jared application">
        <run-generic paranoid="false"/>
    </target>

    <target name="run-paranoid" depends="jar" description="run the jared application (paranoid mode)">
        <run-generic paranoid="true"/>
    </target>

    <target name="rejar" depends="clean,jar" description="clean and jar anew"/>

</project>
