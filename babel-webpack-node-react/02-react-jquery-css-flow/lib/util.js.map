{"version":3,"sources":["../app/util.js"],"names":["_","require","isSetOf","setOfTs","T","Set","some","Array","from","entries","x","msg","item","klass","arr2set","ts","rv","diff","length","size","isTrue","Error","camelCase2Space","s","replace","str","toUpperCase","nameOfClass","console","log","name","nameOfClassC2S","exports"],"mappings":"AACA;;;;AAEA;;AADA,IAAUA,IAAKC,QAAQ,QAAR,CAAf;;;AAKA,SAASC,OAAT,CAAiBC,OAAjB,EAA+BC,CAA/B,EAAqD;AACjD,QAAI,EAAED,mBAAmBE,GAArB,CAAJ,EAA+B,OAAO,KAAP;AAC/B,QAAIL,EAAEM,IAAF,CAAOC,MAAMC,IAAN,CAAWL,QAAQM,OAAR,EAAX,CAAP,EACS;AAAA;AAAA,YAAEC,CAAF;AAAA,YAAKV,CAAL;;AAAA,eAAU,EAAEU,aAAaN,CAAf,CAAV;AAAA,KADT,CAAJ,EAEI,OAAO,KAAP;AACJ,WAAO,IAAP;AACH;AACDF,QAAQS,GAAR,GAAc,UAACC,IAAD,EAAOC,KAAP;AAAA,WAAkBD,IAAlB,yBAA0CC,KAA1C;AAAA,CAAd;;AAGA,SAASC,OAAT,CAAiBC,EAAjB,EAAsC;AAClC,QAAMC,KAAK,IAAIX,GAAJ,CAAQU,EAAR,CAAX;AACA,QAAME,OAAeF,GAAGG,MAAH,GAAYF,GAAGG,IAApC;AACA,iBAAOC,MAAP,CAAcH,QAAM,CAApB;AACA,QAAIA,SAAS,CAAb,EACI,MAAM,IAAII,KAAJ,eAAsBJ,IAAtB,kCAAN;AACJ,WAAOD,EAAP;AACH;;AAED,SAASM,eAAT,CAAyBC,CAAzB,EAA4C;AACxC,WAAOA,EAAEC,OAAF,CAAU,UAAV,EAAsB,KAAtB,EAA6D;AAA7D,KACEA,OADF,CACU,IADV,EACgB,UAASC,GAAT,EAAa;AAAE,eAAOA,IAAIC,WAAJ,EAAP;AAA2B,KAD1D,CAAP,CADwC,CAE4B;AACvE;;AAED,SAASC,WAAT,CAAqBd,KAArB,EAAgD;AAC5Ce,YAAQC,GAAR,CAAYhB,MAAMiB,IAAlB;AACA,WAAOjB,MAAMiB,IAAb;AACH;;AAED,SAASC,cAAT,CAAwBlB,KAAxB,EAAmD;AAAE;AACjD,WAAOS,gBAAgBK,YAAYd,KAAZ,CAAhB,CAAP;AACH;;AAGDmB,QAAQ9B,OAAR,GAA0BA,OAA1B;AACA8B,QAAQlB,OAAR,GAA0BA,OAA1B;AACAkB,QAAQV,eAAR,GAA0BA,eAA1B;AACAU,QAAQL,WAAR,GAA0BA,WAA1B;AACAK,QAAQD,cAAR,GAA0BA,cAA1B","file":"util.js","sourcesContent":[" /* @flow */\n'use strict';\nconst     _  = require('lodash');\nimport {assert} from 'chai';\n\ndeclare type Function = () => any;\n\nfunction isSetOf(setOfTs: any, T: Function): boolean {\n    if (!(setOfTs instanceof Set)) return false;\n    if (_.some(Array.from(setOfTs.entries())\n               , ([x, _])=>!(x instanceof T)))\n        return false;\n    return true;\n}\nisSetOf.msg = (item, klass)=>`${item} is not a set of ${klass} values`;\n\n\nfunction arr2set(ts: Array<any>): any {\n    const rv = new Set(ts);\n    const diff: number = ts.length - rv.size;\n    assert.isTrue(diff>=0);\n    if (diff !== 0)\n        throw new Error(`at least ${diff} duplicate elements detected`);\n    return rv;\n}\n\nfunction camelCase2Space(s: string): string {\n    return s.replace(/([A-Z])/g, ' $1')                                 // insert a space before all caps\n            .replace(/^./, function(str){ return str.toUpperCase(); }); // uppercase the first character\n}\n\nfunction nameOfClass(klass: Class<any>): string {\n    console.log(klass.name);\n    return klass.name;\n}\n\nfunction nameOfClassC2S(klass: Class<any>): string { // C2S stands for Camel 2 Space\n    return camelCase2Space(nameOfClass(klass));\n}\n\n\nexports.isSetOf         = isSetOf;\nexports.arr2set         = arr2set;\nexports.camelCase2Space = camelCase2Space;\nexports.nameOfClass     = nameOfClass;\nexports.nameOfClassC2S  = nameOfClassC2S;\n\n"]}